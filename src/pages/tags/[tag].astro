---
import type { GetStaticPaths, InferGetStaticParamsType, InferGetStaticPropsType } from 'astro'
import { getCollection } from 'astro:content'

import BlogArticle from '../../components/BlogArticle.astro'
import BaseLayout from '../../layouts/BaseLayout.astro'

export const getStaticPaths = (async function () {
  const allArticles = await getCollection('articles')
  const uniqueTags = [
    ...new Set(allArticles.map((article) => article.data.tags ?? []).flat()),
  ]

  return uniqueTags.map((tag: any) => {
    const filteredArticles = allArticles.filter((article) => article.data.tags?.includes(tag))
    return {
      params: { tag },
      props: { articles: filteredArticles },
    }
  })
}) satisfies GetStaticPaths
// export async function getStaticPaths() {
//   const allArticles = await getCollection('articles')
//   const uniqueTags = [
//     ...new Set(allArticles.map((article) => article.data.tags ?? []).flat()),
//   ]

//   return uniqueTags.map((tag) => {
//     const filteredArticles = allArticles.filter((article) => {
//       if(article.data.tags) {
//         return article.data.tags.includes(tag)
//       }
//     }
//     )
//     return {
//       params: { tag },
//       props: { articles: filteredArticles },
//     }
//   })
// }

type Params = InferGetStaticParamsType<typeof getStaticPaths>
type Props = InferGetStaticPropsType<typeof getStaticPaths>

const { tag } = Astro.params as Params
const { articles } = Astro.props as Props;
---

<BaseLayout pageTitle={tag}>
  <div class="content">
    <p class="title">Articles tagged with {tag}</p>
    <br />
    <ul>
      {
        articles.map((article: { slug: any; data: { title: any } }) => (
          <BlogArticle
            url={`/articles/${article.slug}`}
            title={article.data.title}
          />
        ))
      }
    </ul>
  </div>
</BaseLayout>

<style>
  .content {
    margin-bottom: 33em;
    padding: 3em 0 0 3em;
    box-sizing: border-box;
  }
  .title {
    color: red;
    font-size: 20px;
  }
</style>
